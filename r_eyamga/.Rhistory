library(clustMixType)
coda19_subset <- coda19%>%select(-c("patient_site_uid", "wave", "death", "levelofcare", "icu"))
Es <- numeric(10)
for(i in 1:10){
kpres <- kproto(coda19_subset, k = i)
Es[i] <- kpres$tot.withinss
}
Essil <- numeric(10)
for(i in 2:10){
kpres <- kproto(coda19_subset, k = i)
Essil[i] <- validation_kproto(method = "silhouette", object = kpres)
}
Esmcclain <- numeric(10)
for(i in 2:10){
kpres <- kproto(coda19_subset, k = i)
Esmcclain[i] <- validation_kproto(method = "mcclain", object = kpres)
}
plot(1:10, Es, type = "b", ylab = "Total Within Sum Of Squares", xlab = "Number of clusters")
plot(1:10, Essil, type = "b", ylab = "Silhouette", xlab = "Number of clusters")
plot(1:10, Esmcclain, type = "b", ylab = "McClain-Rao index", xlab = "Number of clusters")
k=3
kpres <- kproto(coda19_subset, k = 3)
# Final clustering algorithm ----------------------------------------------
results <- coda19 %>%
mutate(cluster = kpres$cluster) %>%
group_by(cluster) %>%
do(the_summary = summary(.))
# Results - Variables per cluster
# This is also done later through EDA
#print(pam_results$the_summary)
# Plotting the results : TSNE  -------------------------------------
# 1 ) Plotting the clustering results on TSNE
gower_distance <- cluster::daisy(coda19%>%select
(-c("patient_site_uid", "wave", "death", "levelofcare", "icu")),  #keeping MV
metric = "gower") #Removing all cat variables from clustering except MV
tsne_obj <- Rtsne(gower_distance, is_distance = TRUE, perplexity = 20)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(Clusters = factor(kpres$cluster))
p <- ggplot(aes(x = X, y = Y,), data = tsne_data) +
geom_point(aes(color = Clusters))+
ggtitle("3 K-PAM clustering")
show(p)
gower_distance <- cluster::daisy(coda19%>%select
(-c("patient_site_uid", "wave", "death", "levelofcare", "icu")),  #keeping MV
metric = "gower") #Removing all cat variables from clustering except MV
tsne_obj <- Rtsne(gower_distance, is_distance = TRUE, perplexity = 10)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(Clusters = factor(kpres$cluster))
p <- ggplot(aes(x = X, y = Y,), data = tsne_data) +
geom_point(aes(color = Clusters))+
ggtitle("3 K-PAM clustering")
show(p)
fviz_cluster(kpres, geom = "point", ellipse.type = "norm")
kpres
kpres$data
fviz_cluster(kpres$data, geom = "point", ellipse.type = "norm")
fviz_cluster(kpres$data, geom = "point", ellipse.type = "norm")
?daisy
# Preparing the dataset for clustering  --------------------------------------------------------
# No data transformation for Kproto, handled by factoextraR
#Clustering algorithms --------------------------------------------------------
## Method one : using factoextra package and eclust method
# K-means clustering
# Main advantage of the eclust function, is that multiple clustering algorithms can be run
# # Can specify distance measure but only for continuous variables
# km.res <- eclust(coda19, "kmeans", k = 3, nstart = 25, stand=TRUE, graph = FALSE)
#
# # Visualize k-means clusters
# fviz_cluster(km.res, geom = "point", ellipse.type = "norm",
#              palette = "jco", ggtheme = theme_minimal())
# #  Evaluating optimal Number of clusters - this plot will not work as the dataset is not standardized
# fviz_nbclust(coda19, FUNcluster = kmeans, method = "wss", stand=TRUE)
#
# ## Method 2 using the cluster package and the PAM algorithm
# Evaluation of optimal Lambda parameter ----------------------------------
library(clustMixType)
coda19_subset <- coda19%>%select(-c("patient_site_uid", "wave", "death", "levelofcare", "icu"))
Es <- numeric(10)
for(i in 1:10){
kpres <- kproto(coda19_subset, k = i)
Es[i] <- kpres$tot.withinss
}
Essil <- numeric(10)
for(i in 2:10){
kpres <- kproto(coda19_subset, k = i)
Essil[i] <- validation_kproto(method = "silhouette", object = kpres)
}
Esmcclain <- numeric(10)
for(i in 2:10){
kpres <- kproto(coda19_subset, k = i)
Esmcclain[i] <- validation_kproto(method = "mcclain", object = kpres)
}
plot(1:10, Es, type = "b", ylab = "Total Within Sum Of Squares", xlab = "Number of clusters")
plot(1:10, Essil, type = "b", ylab = "Silhouette", xlab = "Number of clusters")
plot(1:10, Esmcclain, type = "b", ylab = "McClain-Rao index", xlab = "Number of clusters")
# Final k value = 4
k=3
kpres <- kproto(coda19_subset, k = 3)
# Final clustering algorithm ----------------------------------------------
results <- coda19 %>%
mutate(cluster = kpres$cluster) %>%
group_by(cluster) %>%
do(the_summary = summary(.))
# Results - Variables per cluster
# This is also done later through EDA
#print(pam_results$the_summary)
# Plotting the results : TSNE  -------------------------------------
# 1 ) Plotting the clustering results on TSNE
gower_distance <- cluster::daisy(coda19%>%select
(-c("patient_site_uid", "wave", "death", "levelofcare", "icu")),  #keeping MV
metric = "gower") #Removing all cat variables from clustering except MV
tsne_obj <- Rtsne(gower_distance, is_distance = TRUE, perplexity = 10)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(Clusters = factor(kpres$cluster))
p <- ggplot(aes(x = X, y = Y,), data = tsne_data) +
geom_point(aes(color = Clusters))+
ggtitle("3 K-PAM clustering")
show(p)
dev.print(pdf, file="./output/clustering/finalclustering_TSNE.pdf")
fviz_cluster(kpres$data, geom = "point", ellipse.type = "norm")
# EDA of the clustering results -------------------------------------------
# Methods 2, Descriptive statistics
result <- coda19 %>%
mutate(cluster = kpres$cluster) # dataframe with clusters added
alllist <- names(result)
catlist <- names(result[sapply(result, is.factor)])
tableOne_compared <- tableone::CreateTableOne(vars = alllist, data = coda19, strata = "cluster", factorVars = catlist, test=TRUE, addOverall = TRUE)
pt <- print(tableOne_compared, missing = TRUE, quote = FALSE, noSpaces = FALSE)
write.csv(pt, file = "./output/clustering/clusters_stats_tableone.csv")
plot(1:10, Essil, type = "b", ylab = "Silhouette", xlab = "Number of clusters")
dev.print(pdf, file="./output/clustering/kproto_sil.pdf")
coda19 <- coda19%>%select(c("patient_site_uid","patient_age", "hemoglobin_min", "plt_max", "wbc_mean", "neutrophil_mean",
"lymph_min", "mono_max", "baso_min", "eos_min", "sodium_mean", "potassium_mean", "creatinine_mean",
"fio2_mean", "so2_min", "temp_mean", "sbp_mean", "dbp_mean", "rr_mean",'mv',
"levelofcare", "wave", "icu", "death"))
coda19 <- coda19%>%mutate_if(function(x){(length(unique(x)) <= 13)}, function(x){as.factor(x)})
coda19 <- coda19%>%mutate_if(function(x){(length(unique(x)) >= 13)}, function(x){as.numeric(x)})
coda19 <- coda19%>%select(c("patient_site_uid","patient_age", "hemoglobin_min", "plt_max", "wbc_mean", "neutrophil_mean",
"lymph_min", "mono_max", "baso_min", "eos_min", "sodium_mean", "potassium_mean", "creatinine_mean",
"fio2_mean", "so2_min", "temp_mean", "sbp_mean", "dbp_mean", "rr_mean",'mv',
"levelofcare", "wave", "icu", "death"))
coda19 <- coda19%>%mutate_if(function(x){(length(unique(x)) <= 13)}, function(x){as.factor(x)})
coda19 <- coda19%>%mutate_if(function(x){(length(unique(x)) >= 13)}, function(x){as.numeric(x)})
coda19s <- scale(coda19)
coda19s <- scale(coda19)
coda19 <- coda19%>%mutate_if(function(x){(length(unique(x)) >= 15)}, function(x){scale(as.numeric(x))})
View(coda19)
coda19 <- read_csv("./data/imputed/covid24h_imputed.csv")
coda19pid <- coda19%>%select(patient_site_uid)
coda19 <- read_csv("./data/imputed/covid24h_imputed.csv")
coda19 <- coda19%>%select(c("patient_site_uid","patient_age", "hemoglobin_min", "plt_max", "wbc_mean", "neutrophil_mean",
"lymph_min", "mono_max", "baso_min", "eos_min", "sodium_mean", "potassium_mean", "creatinine_mean",
"fio2_mean", "so2_min", "temp_mean", "sbp_mean", "dbp_mean", "rr_mean",'mv',
"levelofcare", "wave", "icu", "death"))
# Separating categorical from numerical variables
coda19pid <- coda19%>%select(patient_site_uid)
coda19 <- coda19%>%mutate_if(function(x){(length(unique(x)) <= 15)},
function(x){as.factor(x)})
coda19 <- coda19%>%mutate_if(function(x){(length(unique(x)) >= 15)},
function(x){scale(as.numeric(x))})
coda19$patient_site_uid <- coda19pid
km.res <- eclust(coda19, "kmeans", k = 3, nstart = 25, stand=TRUE, graph = FALSE)
km.res <- eclust(coda19%>%select(-c("patient_site_uid","levelofcare", "wave", "icu", "death")), "kmeans", k = 3, nstart = 25, stand=TRUE, graph = FALSE)
t <- coda19%>%select(-c("patient_site_uid","levelofcare", "wave", "icu", "death"))
View(t)
coda19$mv <- as.numeric(coda19$mv)
coda19$mv <- scale(as.numeric(coda19$mv))
km.res <- eclust(coda19%>%select(-c("patient_site_uid","levelofcare", "wave", "icu", "death")), "kmeans", k = 3, nstart = 25, stand=TRUE, graph = FALSE)
coda19$baso_min <- scale(as.numeric(coda19$baso_min))
km.res <- eclust(coda19%>%select(-c("patient_site_uid","levelofcare", "wave", "icu", "death")), "kmeans", k = 3, nstart = 25, stand=TRUE, graph = FALSE)
fviz_cluster(km.res, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal())
fviz_nbclust(coda19%>%select(-c("patient_site_uid","levelofcare", "wave", "icu", "death")), FUNcluster = kmeans, method = "wss", stand=TRUE)
?fviz_nbclust
fviz_nbclust(coda19%>%select(-c("patient_site_uid","levelofcare", "wave", "icu", "death")), kmeans, method = "wss", stand=TRUE)
fviz_nbclust(coda19%>%select(-c("patient_site_uid","levelofcare", "wave", "icu", "death")), kmeans, method = "wss")
fviz_nbclust(coda19%>%select(-c("patient_site_uid","levelofcare", "wave", "icu", "death")), kmeans, method = "silhouette")
coda19_original <- read_csv("./data/imputed/covid24h_imputed.csv")
coda19_original <- coda19_original%>%mutate_if(function(x){(length(unique(x)) <= 15)},
function(x){as.factor(x)})
coda19_original <- coda19_original%>%mutate_if(function(x){(length(unique(x)) >= 15)},
function(x){as.numeric(x)})
km.res$cluster
fviz_nbclust(coda19%>%select(-c("patient_site_uid","levelofcare", "wave", "icu", "death")), kmeans, nstart = 25, method = "gap_stat", nboot = 500) + #nboot is # of bootstrap sample - must be included
coda19%>%select(-c("patient_site_uid","levelofcare", "wave", "icu", "death"))
dev.print(pdf, file="./output/clustering/silhouetteKMeans.pdf")
fviz_cluster(km.res, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal())
dev.print(pdf, file="./output/clustering/clusteringKMeans.pdf")
gower_distance <- cluster::daisy(coda19%>%select
(-c("patient_site_uid", "wave", "death", "levelofcare", "icu")),  #keeping MV
metric = "gower") #Removing all cat variables from clustering except MV
tsne_obj <- Rtsne(gower_distance, is_distance = TRUE, perplexity = 10)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(Clusters = factor(km.res$cluster))
p <- ggplot(aes(x = X, y = Y,), data = tsne_data) +
geom_point(aes(color = Clusters))+
ggtitle("3 K-PAM clustering")
show(p)
km.res <- eclust(coda19%>%select(-c("patient_site_uid","levelofcare", "wave", "icu", "death")), "kmeans", k = 2, nstart = 25, stand=TRUE, graph = FALSE)
fviz_cluster(km.res, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal())
dev.print(pdf, file="./output/clustering/clusteringKMeans.pdf")
gower_distance <- cluster::daisy(coda19_original%>%select
(-c("patient_site_uid", "wave", "death", "levelofcare", "icu")),  #keeping MV
metric = "gower") #Removing all cat variables from clustering except MV
tsne_obj <- Rtsne(gower_distance, is_distance = TRUE, perplexity = 10)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(Clusters = factor(km.res$cluster))
p <- ggplot(aes(x = X, y = Y,), data = tsne_data) +
geom_point(aes(color = Clusters))+
ggtitle("3 K-PAM clustering")
show(p)
dev.print(pdf, file="./output/clustering/finalKMEANSclustering_TSNE.pdf")
result <- coda19_original %>%
mutate(cluster = km.res$cluster) # dataframe with clusters added
alllist <- names(result)
catlist <- names(result[sapply(result, is.factor)])
tableOne_compared <- tableone::CreateTableOne(vars = alllist, data = coda19, strata = "cluster", factorVars = catlist, test=TRUE, addOverall = TRUE)
pt <- print(tableOne_compared, missing = TRUE, quote = FALSE, noSpaces = FALSE)
result <- coda19_original %>%
mutate(cluster = km.res$cluster) # dataframe with clusters added
alllist <- names(result)
catlist <- names(result[sapply(result, is.factor)])
tableOne_compared <- tableone::CreateTableOne(vars = alllist, data = coda19, strata = "cluster", factorVars = catlist, test=TRUE, addOverall = TRUE)
pt <- print(tableOne_compared, missing = TRUE, quote = FALSE, noSpaces = FALSE)
tableOne_compared <- tableone::CreateTableOne(vars = alllist, data = result, strata = "cluster", factorVars = catlist, test=TRUE, addOverall = TRUE)
pt <- print(tableOne_compared, missing = TRUE, quote = FALSE, noSpaces = FALSE)
coda19_original <- coda19_original%>%select(c("patient_site_uid","patient_age", "hemoglobin_min", "plt_max", "wbc_mean", "neutrophil_mean",
"lymph_min", "mono_max", "baso_min", "eos_min", "sodium_mean", "potassium_mean", "creatinine_mean",
"fio2_mean", "so2_min", "temp_mean", "sbp_mean", "dbp_mean", "rr_mean",'mv',
"levelofcare", "wave", "icu", "death"))
result <- coda19_original %>%
mutate(cluster = km.res$cluster) # dataframe with clusters added
alllist <- names(result)
catlist <- names(result[sapply(result, is.factor)])
tableOne_compared <- tableone::CreateTableOne(vars = alllist, data = result, strata = "cluster", factorVars = catlist, test=TRUE, addOverall = TRUE)
pt <- print(tableOne_compared, missing = TRUE, quote = FALSE, noSpaces = FALSE)
write.csv(pt, file = "./output/clustering/clusters_stats_tableone.csv")
coda19 <- read_csv("./data/icudata/imputed/covidicu24h_imputed.csv")
coda19 <- coda19%>%select(c("patient_site_uid","patient_age", "hemoglobin_min", "plt_max", "wbc_mean", "neutrophil_mean",
"lymph_min", "mono_max", "baso_min", "eos_min", "sodium_mean", "potassium_mean", "chloride_mean", "creatinine_min",
"bun_mean","magnesium_mean", "phosphate_mean", "glucose_mean", "ptt_max", "alt_max", "bili_tot_max", "ck_mean",
"albumin_mean", "lactate_max", "svo2sat_mean", "paco2_mean",
"fio2_mean", "so2_min", "temp_mean", "neuromuscular_blocking_agents",
"anticholesteremic_agents","male", "bronchodilator_agents", "antihypertensive_agents",
"diuretics", "hypoglycemic_agents", "platelet_aggregation_inhibitors", "vasopressors",
'mv', "wave", "death"))
coda19pid <- coda19%>%select(patient_site_uid)
# coda19 <- coda19%>%mutate_if(function(x){(length(unique(x)) <= 15)},
#                              function(x){as.factor(x)})
coda19 <- coda19%>%mutate_all(function(x){scale(as.numeric(x))})
coda19$patient_site_uid <- coda19pid
coda19_original <- read_csv("./data/icudata/imputed/covidicu24h_imputed.csv")
coda19_original <- coda19_original%>%mutate_if(function(x){(length(unique(x)) <= 15)},
function(x){as.factor(x)})
coda19_original <- coda19_original%>%mutate_if(function(x){(length(unique(x)) >= 15)},
function(x){as.numeric(x)})
coda19_original <- coda19_original%>%select(c("patient_site_uid","patient_age", "hemoglobin_min", "plt_max", "wbc_mean", "neutrophil_mean",
"lymph_min", "mono_max", "baso_min", "eos_min", "sodium_mean", "potassium_mean", "chloride_mean", "creatinine_min",
"bun_mean","magnesium_mean", "phosphate_mean", "glucose_mean", "ptt_max", "alt_max", "bili_tot_max", "ck_mean",
"albumin_mean", "lactate_max", "svo2sat_mean", "paco2_mean",
"fio2_mean", "so2_min", "temp_mean", "neuromuscular_blocking_agents",
"anticholesteremic_agents","male", "bronchodilator_agents", "antihypertensive_agents",
"diuretics", "hypoglycemic_agents", "platelet_aggregation_inhibitors", "vasopressors",
'mv', "wave", "death"))
fviz_nbclust(coda19%>%select(-c("patient_site_uid", "wave", "death")), kmeans, palette = "jco", method = "silhouette")
fviz_nbclust(coda19%>%select(-c("patient_site_uid", "wave", "death")), kmeans, palette = "jco", method = "silhouette")
fviz_nbclust(coda19%>%select(-c("patient_site_uid", "wave", "death")), kmeans, method = "silhouette")
fviz_nbclust(coda19%>%select(-c("patient_site_uid", "wave", "death")), kmeans, method = "silhouette")
dev.print(pdf, file="./output/clustering/silhouetteKMeans.pdf")
km.res <- eclust(coda19%>%select(-c("patient_site_uid", "wave", "death")), "kmeans", k = 3, nstart = 25, stand=TRUE, graph = FALSE)
fviz_cluster(km.res, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal())
fviz_cluster(km.res, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal())
dev.print(pdf, file="./output/clustering/clusteringKMeans.pdf")
gower_distance <- cluster::daisy(coda19_original%>%select
(-c("patient_site_uid", "wave", "death")),  #keeping MV
metric = "gower") #Removing all cat variables from clustering except MV
tsne_obj <- Rtsne(gower_distance, is_distance = TRUE, perplexity = 10)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(Clusters = factor(km.res$cluster))
p <- ggplot(aes(x = X, y = Y,), data = tsne_data) +
geom_point(aes(color = Clusters))+
ggtitle("3 K-PAM clustering")
show(p)
# 1 ) Plotting the clustering results on TSNE
gower_distance <- cluster::daisy(coda19_original%>%select
(-c("patient_site_uid", "wave", "death")),  #keeping MV
metric = "gower") #Removing all cat variables from clustering except MV
tsne_obj <- Rtsne(gower_distance, is_distance = TRUE, perplexity = 10)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(Clusters = factor(km.res$cluster))
p <- ggplot(aes(x = X, y = Y,), data = tsne_data) +
geom_point(aes(color = Clusters))+
ggtitle("3 K-PAM clustering")
show(p)
dev.print(pdf, file="./output/clustering/finalKMEANSclustering_TSNE.pdf")
result <- coda19_original %>%
mutate(cluster = km.res$cluster) # dataframe with clusters added
alllist <- names(result)
catlist <- names(result[sapply(result, is.factor)])
tableOne_compared <- tableone::CreateTableOne(vars = alllist, data = result, strata = "cluster", factorVars = catlist, test=TRUE, addOverall = TRUE)
pt <- print(tableOne_compared, missing = TRUE, quote = FALSE, noSpaces = FALSE)
write.csv(pt, file = "./output/clustering/clusters_stats_tableone.csv")
coda19 <- read_csv("./data/icudata/imputed/covidicu24h_imputed.csv")
coda19pid <- coda19%>%select(patient_site_uid)
# coda19 <- coda19%>%mutate_if(function(x){(length(unique(x)) <= 15)},
#                              function(x){as.factor(x)})
coda19 <- coda19%>%mutate_all(function(x){scale(as.numeric(x))})
coda19$patient_site_uid <- coda19pid
# Keeping original dataframe for post clustering analysis
coda19_original <- read_csv("./data/icudata/imputed/covidicu24h_imputed.csv")
coda19_original <- coda19_original%>%mutate_if(function(x){(length(unique(x)) <= 15)},
function(x){as.factor(x)})
coda19_original <- coda19_original%>%mutate_if(function(x){(length(unique(x)) >= 15)},
function(x){as.numeric(x)})
coda19_original <- coda19_original%>%select(c("patient_site_uid","patient_age", "hemoglobin_min", "plt_max", "wbc_mean", "neutrophil_mean",
"lymph_min", "mono_max", "baso_min", "eos_min", "sodium_mean", "potassium_mean", "chloride_mean", "creatinine_min",
"bun_mean","magnesium_mean", "phosphate_mean", "glucose_mean", "ptt_max", "alt_max", "bili_tot_max", "ck_mean",
"albumin_mean", "lactate_max", "svo2sat_mean", "paco2_mean",
"fio2_mean", "so2_min", 'mv', "wave", "death"))
fviz_nbclust(coda19%>%select(-c("patient_site_uid", "wave", "death")), kmeans, method = "silhouette")
dev.print(pdf, file="./output/clustering/silhouetteKMeans.pdf")
km.res <- eclust(coda19%>%select(-c("patient_site_uid", "wave", "death")), "kmeans", k = 3, nstart = 25, stand=TRUE, graph = FALSE)
# Visualize k-means clusters
fviz_cluster(km.res, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal())
dev.print(pdf, file="./output/clustering/clusteringKMeans.pdf")
results <- coda19 %>%
mutate(cluster = km.res$cluster) %>%
group_by(cluster) %>%
do(the_summary = summary(.))
# Results - Variables per cluster
# This is also done later through EDA
#print(pam_results$the_summary)
# Plotting the results : TSNE  -------------------------------------
# 1 ) Plotting the clustering results on TSNE
gower_distance <- cluster::daisy(coda19_original%>%select
(-c("patient_site_uid", "wave", "death")),  #keeping MV
metric = "gower") #Removing all cat variables from clustering except MV
tsne_obj <- Rtsne(gower_distance, is_distance = TRUE, perplexity = 10)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(Clusters = factor(km.res$cluster))
p <- ggplot(aes(x = X, y = Y,), data = tsne_data) +
geom_point(aes(color = Clusters))+
ggtitle("3 K-PAM clustering")
show(p)
dev.print(pdf, file="./output/clustering/finalKMEANSclustering_TSNE.pdf")
# EDA of the clustering results -------------------------------------------
# Methods 2, Descriptive statistics
result <- coda19_original %>%
mutate(cluster = km.res$cluster) # dataframe with clusters added
alllist <- names(result)
catlist <- names(result[sapply(result, is.factor)])
tableOne_compared <- tableone::CreateTableOne(vars = alllist, data = result, strata = "cluster", factorVars = catlist, test=TRUE, addOverall = TRUE)
pt <- print(tableOne_compared, missing = TRUE, quote = FALSE, noSpaces = FALSE)
write.csv(pt, file = "./output/clustering/clusters_stats_tableone.csv")
km.res <- eclust(coda19%>%select(-c("patient_site_uid", "wave", "death")), "kmeans", k = 2, nstart = 25, stand=TRUE, graph = FALSE)
# Visualize k-means clusters
fviz_cluster(km.res, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal())
dev.print(pdf, file="./output/clustering/clusteringKMeans.pdf")
results <- coda19 %>%
mutate(cluster = km.res$cluster) %>%
group_by(cluster) %>%
do(the_summary = summary(.))
# Results - Variables per cluster
# This is also done later through EDA
#print(pam_results$the_summary)
# Plotting the results : TSNE  -------------------------------------
# 1 ) Plotting the clustering results on TSNE
gower_distance <- cluster::daisy(coda19_original%>%select
(-c("patient_site_uid", "wave", "death")),  #keeping MV
metric = "gower") #Removing all cat variables from clustering except MV
tsne_obj <- Rtsne(gower_distance, is_distance = TRUE, perplexity = 10)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(Clusters = factor(km.res$cluster))
p <- ggplot(aes(x = X, y = Y,), data = tsne_data) +
geom_point(aes(color = Clusters))+
ggtitle("3 K-PAM clustering")
show(p)
dev.print(pdf, file="./output/clustering/finalKMEANSclustering_TSNE.pdf")
# EDA of the clustering results -------------------------------------------
# Methods 2, Descriptive statistics
result <- coda19_original %>%
mutate(cluster = km.res$cluster) # dataframe with clusters added
alllist <- names(result)
catlist <- names(result[sapply(result, is.factor)])
tableOne_compared <- tableone::CreateTableOne(vars = alllist, data = result, strata = "cluster", factorVars = catlist, test=TRUE, addOverall = TRUE)
pt <- print(tableOne_compared, missing = TRUE, quote = FALSE, noSpaces = FALSE)
write.csv(pt, file = "./output/clustering/clusters_stats_tableone.csv")
View(tableOne_compared)
# Separating categorical from numerical variables
coda19 <- coda19%>%mutate_if(function(x){(length(unique(x)) <= 13)}, function(x){as.factor(x)})
coda19 <- coda19%>%mutate_if(function(x){(length(unique(x)) >= 13)}, function(x){as.numeric(x)})
# Observing the data quickly FAMD ------------------------------------------
#
# coltypes <- str(coda19)
# sapply(coda19, class) #alternatively typeof
#
#
# # FAMD analysis - pre clustering, simply looking at variance of the mixed dataset
# res.coda19 <- FAMD(coda19,
#                    sup.var = c(40:42), #DEATH is not included for now
#                    graph = FALSE,
#                    ncp=25)
#
#
# ## Inspect principal components
# kable(get_eigenvalue(res.coda19))%>%
#   kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
#
# fviz_famd_ind(res.coda19,
#               col.ind = "#2eb135",
#               label = "none",
#               repel = TRUE) +
#   xlim(-5, 5) + ylim (-4.5, 4.5)
#
# # get_famd_ind(res.coda19)
#
# Preparing the dataset for clustering  --------------------------------------------------------
# Compute Gower Distances
# gower_distance <- cluster::daisy(coda19, metric = "gower")
gower_distance <- cluster::daisy(coda19%>%select
(-c("patient_site_uid","levelofcare", "wave", "icu", "death")),
metric = "gower") #Removing all cat variables from clustering except MV
gower_mat <- as.matrix(gower_distance)
# Print most similar patients
# demo <- coda19[which(gower_mat == min(gower_mat[gower_mat != min(gower_mat)]), arr.ind = TRUE)[1, ], ]
# # Print most dissimilar clients
# demo2 <- coda19[which(gower_mat == max(gower_mat[gower_mat != max(gower_mat)]), arr.ind = TRUE)[1, ], ]
# NB this step is only needed for PAM algorithm as the euclidean distance is directly computed in the K means method
#Clustering algorithms --------------------------------------------------------
## Method one : using factoextra package and eclust method
# K-means clustering
# Main advantage of the eclust function, is that multiple clustering algorithms can be run
# # Can specify distance measure but only for continuous variables
# km.res <- eclust(coda19, "kmeans", k = 3, nstart = 25, stand=TRUE, graph = FALSE)
#
# # Visualize k-means clusters
# fviz_cluster(km.res, geom = "point", ellipse.type = "norm",
#              palette = "jco", ggtheme = theme_minimal())
# #  Evaluating optimal Number of clusters - this plot will not work as the dataset is not standardized
# fviz_nbclust(coda19, FUNcluster = kmeans, method = "wss", stand=TRUE)
#
# ## Method 2 using the cluster package and the PAM algorithm
# Evaluation of optimal K -------------------------------------------------
# Visualization method
# 1) Different TSNE visuals according to K
# Trying different values of k from 2 to 8
tsne_obj <- Rtsne(gower_distance, is_distance = TRUE)
plotslist = list()
for(i in 2:8){
pam_fit <- pam(gower_distance, diss = TRUE, k = i)
pam_results <- coda19 %>%
mutate(cluster = pam_fit$clustering) %>%
group_by(cluster) %>%
do(the_summary = summary(.))
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering))
p <- ggplot(aes(x = X, y = Y,), data = tsne_data) +
geom_point(aes(color = cluster))+
ggtitle(paste0(as.character(i), " K-means clustering"))
plotslist[[i]] <- p
}
options(repr.plot.width = 20, repr.plot.height = 20)
p <- plot_grid(plotlist = plotslist, ncol = 3)
p
pam_fit <- pam(gower_distance, diss = TRUE, k)
result2 <- coda19 %>%
mutate(cluster = pam_fit$clustering)
library(M3C)
install.packages("M3C")
tsne(result2, labels=as.factor(result2$cluster))
BiocManager::install("M3C")
install.packages("BiocManager")
BiocManager::install("M3C")
library(M3C)
tsne(result2, labels=as.factor(result2$cluster))
tsne(gower_distance, labels=as.factor(result2$cluster))
tsne_obj <- Rtsne(coda19_gower, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(Clusters = factor(pam_fit$clustering))
p <- ggplot(aes(x = X, y = Y,), data = tsne_data) +
geom_point(aes(color = Clusters))+
ggtitle("3 K-PAM clustering")
show(p)
View(result)
